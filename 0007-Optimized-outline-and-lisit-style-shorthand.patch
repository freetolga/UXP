From 3a7a3430bd40643210981dafd85053ee6d0468c2 Mon Sep 17 00:00:00 2001
From: erixreyes <ebreyes2@up.edu.ph>
Date: Wed, 2 Jul 2025 04:21:18 +0800
Subject: [PATCH 7/7] Optimized outline and lisit-style shorthand

---
 layout/style/Declaration.cpp | 73 ++++++++++++++++++++++++++----------
 1 file changed, 53 insertions(+), 20 deletions(-)

diff --git a/layout/style/Declaration.cpp b/layout/style/Declaration.cpp
index 315b8c10f9..2f35b0c41c 100644
--- a/layout/style/Declaration.cpp
+++ b/layout/style/Declaration.cpp
@@ -820,28 +820,56 @@ Declaration::GetPropertyValueInternal(
         break;
       }
 
-      // normal case: output width unless medium and only have color
-      if (!(isMediumWidth && isNoneStyle && !isCurrentColor)) {
-        if (!AppendValueToString(subprops[0], aValue, aSerialization)) {
-          aValue.Truncate();
-          break;
+      if (aProperty == eCSSProperty_outline) {
+        // output color if not currentColor
+        if (!isCurrentColor) {
+          if (!AppendValueToString(subprops[2], aValue, aSerialization)) {
+            aValue.Truncate();
+            break;
+          }
+          aValue.Append(char16_t(' '));
+        }
+        
+        // output style if not none
+        if (!isNoneStyle) {
+          if (!AppendValueToString(subprops[1], aValue, aSerialization)) {
+            aValue.Truncate();
+            break;
+          }
+          aValue.Append(char16_t(' '));
+        }
+        
+        // output width unless medium and only have color
+        if (!(isMediumWidth && isNoneStyle && !isCurrentColor)) {
+          if (!AppendValueToString(subprops[0], aValue, aSerialization)) {
+            aValue.Truncate();
+            break;
+          }
+        }
+      } else {
+        // normal case: output width unless medium and only have color
+        if (!(isMediumWidth && isNoneStyle && !isCurrentColor)) {
+          if (!AppendValueToString(subprops[0], aValue, aSerialization)) {
+            aValue.Truncate();
+            break;
+          }
         }
-      }
 
-      // if style is not none, append style
-      if (!isNoneStyle) {
-        aValue.Append(char16_t(' '));
-        if (!AppendValueToString(subprops[1], aValue, aSerialization)) {
-          aValue.Truncate();
-          break;
+        // if style is not none, append style
+        if (!isNoneStyle) {
+          aValue.Append(char16_t(' '));
+          if (!AppendValueToString(subprops[1], aValue, aSerialization)) {
+            aValue.Truncate();
+            break;
+          }
         }
-      }
 
-      if (!isCurrentColor) {
-        aValue.Append(char16_t(' '));
-        if (!AppendValueToString(subprops[2], aValue, aSerialization)) {
-          aValue.Truncate();
-          break;
+        if (!isCurrentColor) {
+          aValue.Append(char16_t(' '));
+          if (!AppendValueToString(subprops[2], aValue, aSerialization)) {
+            aValue.Truncate();
+            break;
+          }
         }
       }
       break;
@@ -1046,18 +1074,23 @@ Declaration::GetPropertyValueInternal(
       }
       break;
     }
-    case eCSSProperty_list_style:
+    case eCSSProperty_list_style: {
       if (AppendValueToString(eCSSProperty_list_style_position, aValue,
                               aSerialization)) {
         aValue.Append(char16_t(' '));
       }
-      if (AppendValueToString(eCSSProperty_list_style_image, aValue,
+      const nsCSSValue *imageValue = data->ValueFor(eCSSProperty_list_style_image);
+      bool imageIsNone = imageValue->GetUnit() == eCSSUnit_None;
+      
+      if (!imageIsNone && 
+          AppendValueToString(eCSSProperty_list_style_image, aValue,
                               aSerialization)) {
         aValue.Append(char16_t(' '));
       }
       AppendValueToString(eCSSProperty_list_style_type, aValue,
                           aSerialization);
       break;
+    }
     case eCSSProperty_overflow: {
       const nsCSSValue &xValue =
         *data->ValueFor(eCSSProperty_overflow_x);
-- 
2.43.0.windows.1

