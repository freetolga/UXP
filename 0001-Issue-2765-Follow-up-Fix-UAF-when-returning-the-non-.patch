From d4a327c6941a1ec52c48222ee9e17300f2aa3f0f Mon Sep 17 00:00:00 2001
From: Francis Dominic Fajardo <fofajardo@up.edu.ph>
Date: Fri, 27 Jun 2025 23:43:23 +0800
Subject: [PATCH 1/7] Issue #2765 - Follow-up: Fix UAF when returning the
 non-NAC style context from a frameless node

---
 layout/base/nsLayoutUtils.cpp       | 10 +++-------
 layout/base/nsLayoutUtils.h         |  2 +-
 layout/generic/nsGfxScrollFrame.cpp |  2 +-
 widget/cocoa/nsNativeThemeCocoa.mm  |  2 +-
 widget/gtk/nsNativeThemeGTK.cpp     |  2 +-
 widget/windows/nsNativeThemeWin.cpp |  2 +-
 6 files changed, 8 insertions(+), 12 deletions(-)

diff --git a/layout/base/nsLayoutUtils.cpp b/layout/base/nsLayoutUtils.cpp
index 9c0b8b79e5..266f1e3b66 100644
--- a/layout/base/nsLayoutUtils.cpp
+++ b/layout/base/nsLayoutUtils.cpp
@@ -9326,7 +9326,7 @@ nsLayoutUtils::ComputeGeometryBox(nsIFrame* aFrame,
   return r;
 }
 
-/* static */ nsStyleContext*
+/* static */ already_AddRefed<nsStyleContext>
 nsLayoutUtils::GetNonAnonymousStyleContext(nsIFrame* aFrame)
 {
   nsIContent* node = aFrame->GetContent();
@@ -9336,7 +9336,7 @@ nsLayoutUtils::GetNonAnonymousStyleContext(nsIFrame* aFrame)
   }
   MOZ_ASSERT(node, "Native anonymous element with no originating node?");
   if (nsIFrame* primaryFrame = node->GetPrimaryFrame()) {
-    return primaryFrame->StyleContext();
+    return RefPtr<nsStyleContext>(primaryFrame->StyleContext()).forget();
   }
   // If the element doesn't have primary frame, get the computed style
   // from the element directly.
@@ -9344,9 +9344,5 @@ nsLayoutUtils::GetNonAnonymousStyleContext(nsIFrame* aFrame)
   MOZ_ASSERT(node == pc->Document()->GetRootElement(),
              "Root element is the only case for this fallback "
              "path to be triggered");
-  RefPtr<nsStyleContext> styleContext =
-      pc->StyleSet()->ResolveStyleFor(node->AsElement(), nullptr);
-  // Dropping the strong reference is fine because the style should be
-  // held strongly by the element.
-  return styleContext.get();
+  return pc->StyleSet()->ResolveStyleFor(node->AsElement(), nullptr);
 }
diff --git a/layout/base/nsLayoutUtils.h b/layout/base/nsLayoutUtils.h
index ea9a026007..b18edbc9c9 100644
--- a/layout/base/nsLayoutUtils.h
+++ b/layout/base/nsLayoutUtils.h
@@ -2885,7 +2885,7 @@ public:
    * @param aFrame The frame associated with native anonymous content.
    * @return The resolved style context of the nearest non-anonymous DOM ancestor.
    */
-  static nsStyleContext* GetNonAnonymousStyleContext(nsIFrame* aFrame);
+  static already_AddRefed<nsStyleContext> GetNonAnonymousStyleContext(nsIFrame* aFrame);
 
 private:
   static uint32_t sFontSizeInflationEmPerLine;
diff --git a/layout/generic/nsGfxScrollFrame.cpp b/layout/generic/nsGfxScrollFrame.cpp
index 3de9ec603c..9170d01204 100644
--- a/layout/generic/nsGfxScrollFrame.cpp
+++ b/layout/generic/nsGfxScrollFrame.cpp
@@ -1060,7 +1060,7 @@ nsHTMLScrollFrame::Reflow(nsPresContext* aPresContext,
     // This is only needed for root element because scrollbars of non-
     // root elements with "scrollbar-width: none" is already suppressed
     // in ScrollFrameHelper::CreateAnonymousContent.
-    nsStyleContext* scrollbarStyle = nsLayoutUtils::GetNonAnonymousStyleContext(this);
+    RefPtr<nsStyleContext> scrollbarStyle = nsLayoutUtils::GetNonAnonymousStyleContext(this);
     auto scrollbarWidth = scrollbarStyle->StyleUIReset()->mScrollbarWidth;
     if (scrollbarWidth == StyleScrollbarWidth::None) {
       state.mVScrollbar = ShowScrollbar::Never;
diff --git a/widget/cocoa/nsNativeThemeCocoa.mm b/widget/cocoa/nsNativeThemeCocoa.mm
index 396615082c..2dede403da 100644
--- a/widget/cocoa/nsNativeThemeCocoa.mm
+++ b/widget/cocoa/nsNativeThemeCocoa.mm
@@ -2284,7 +2284,7 @@ IsHiDPIContext(nsPresContext* aContext)
 static bool
 IsScrollbarWidthThin(nsIFrame* aFrame)
 {
-  nsStyleContext* styleContext = nsLayoutUtils::GetNonAnonymousStyleContext(aFrame);
+  RefPtr<nsStyleContext> styleContext = nsLayoutUtils::GetNonAnonymousStyleContext(aFrame);
   auto scrollbarWidth = styleContext->StyleUIReset()->mScrollbarWidth;
   return scrollbarWidth == StyleScrollbarWidth::Thin;
 }
diff --git a/widget/gtk/nsNativeThemeGTK.cpp b/widget/gtk/nsNativeThemeGTK.cpp
index 2a9cad0dc8..eceee1b53d 100644
--- a/widget/gtk/nsNativeThemeGTK.cpp
+++ b/widget/gtk/nsNativeThemeGTK.cpp
@@ -1101,7 +1101,7 @@ nsNativeThemeGTK::GetExtraSizeForWidget(nsIFrame* aFrame, uint8_t aWidgetType,
 static bool
 IsScrollbarWidthThin(nsIFrame* aFrame)
 {
-  nsStyleContext* styleContext = nsLayoutUtils::GetNonAnonymousStyleContext(aFrame);
+  RefPtr<nsStyleContext> styleContext = nsLayoutUtils::GetNonAnonymousStyleContext(aFrame);
   auto scrollbarWidth = styleContext->StyleUIReset()->mScrollbarWidth;
   return scrollbarWidth == StyleScrollbarWidth::Thin;
 }
diff --git a/widget/windows/nsNativeThemeWin.cpp b/widget/windows/nsNativeThemeWin.cpp
index a759cfb9d6..68c7d6bd67 100644
--- a/widget/windows/nsNativeThemeWin.cpp
+++ b/widget/windows/nsNativeThemeWin.cpp
@@ -1390,7 +1390,7 @@ GetThemeDpiScaleFactor(nsIFrame* aFrame)
 static bool
 IsScrollbarWidthThin(nsIFrame* aFrame)
 {
-  nsStyleContext* styleContext = nsLayoutUtils::GetNonAnonymousStyleContext(aFrame);
+  RefPtr<nsStyleContext> styleContext = nsLayoutUtils::GetNonAnonymousStyleContext(aFrame);
   auto scrollbarWidth = styleContext->StyleUIReset()->mScrollbarWidth;
   return scrollbarWidth == StyleScrollbarWidth::Thin;
 }
-- 
2.43.0.windows.1

